#include<iostream>

using namespace std;

struct _stack_

{

 int top;

 int size;

 char *s;

};

class stack

{

  struct _stack_ s1;

 public:

  char prec(char);

  bool IsFull();

  bool IsEmpty();

  void getsize(int);

  void display();

  void push(char);

  void pop(char);

  char peek();

};

void stack::getsize(int n)

{

 s1.top=-1;

 s1.size=n;

 s1.s=new char[n];

}

char stack::peek()

{

 char x='A';

 if(!IsEmpty())

  x=s1.s[s1.top];

 else

  cout<<"stack is empty";

 return x;

}

void stack::display()

{

 int i;

 char a[10];

 cin>>a;

 cout<<"this is the input:";

 cout<<a<<endl;

 for(i=0;a[i]!='\0';i++)

 {

  char ch=a[i];

  switch(ch)

  {

  case '+' : push(ch);

             break;

  case '-' : push(ch);

             break;

  case '*' : push(ch);

             break;

  case '/' : push(ch);

             break;

  case '(' : push(ch);

             break;

  case '{' : push(ch);

             break;

  case '[' : push(ch);

             break;

  case '}' : pop(ch);


             break;

   case ')' : while(!IsEmpty() && s1.s[s1.top]!='(')

             {

              cout<<s1.s[s1.top];

              s1.top=s1.top-1;

             }

             // if(s1.s[s1.top]!='(')

               s1.top=s1.top-1;

              //cout<<s1.s[s1.top];

              break;

             break;

  case ']' : pop(ch);

             break;

  default : cout<<ch;

  }

 }

 while(!IsEmpty())

 {

  cout<<s1.s[s1.top];

  s1.top=s1.top-1;

 }

}

char stack::prec(char ch)

{

 switch(ch)

 {

  case '(' :return 1;

            break;

  case '[' :return 1;

            break;

  case '{' :return 1;

            break;

  case '+' :return 2;

            break;

  case '-' :return 2;

            break;

  case '*' : return 3;

            break;

  case '/' : return 3;

             break;

  default:;

 }


}

void stack::push(char ele)

{

 if(!IsFull())

 {

 if(ele== '{' || ele=='[' || ele=='(')

  {

  s1.s[++s1.top]=ele;

//   cout<<"pushed element is:"<<s1.s[s1.top];

  }

 else if((s1.top==-1)||(prec(ele)>prec(peek())))

 {

 s1.s[++s1.top]=ele;

// cout<<"pushed element is:"<<s1.s[s1.top]<<endl;

 }

 else if(prec(ele)<=prec(peek()))

 {

   pop(ele);

   s1.s[++s1.top]=ele;

 }

 else

  cout<<"stack is full";

 }

}

void stack::pop(char ele)

{

 if(!IsEmpty())

 {

 cout<<s1.s[s1.top];

 s1.top=s1.top-1;

 }

 else

  cout<<"stack is empty";


}

bool stack::IsFull()

{

 return(s1.top==s1.size-1);

}

bool stack::IsEmpty()

{

 return(s1.top==-1);

}



int main()

{

 stack a;

 a.getsize(20);

 cout<<"enter the string";

 a.display();

 return 0;


}

