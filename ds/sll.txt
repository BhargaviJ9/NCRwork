#include<iostream>
using namespace std;
struct node
{
 int data;
 struct node *next;
};
class list
{
 struct node *start;
 public:
  list();
  void InsertFirst(int);
  void InsertLast(int);
  void InsertAfter(int,int);
  void InsertBefore(int,int);
  int DeleteFirst();
  int DeleteLast();
  void DeleteSpec(int);
//  void TravelForward();
//  void TravelBackward();
  void Display();
  void Reverse();
// ~list();
};
list::list()
{
 start=NULL;
}
void list::InsertFirst(int ele)
{
 struct node *temp;
 temp=new node;
 temp->data=ele;
 temp->next=start;
 start=temp;
}
void list::InsertLast(int ele)
{
 struct node *temp;
 temp=new node;
 struct node *p;
// p=start;
 temp->data=ele;
 temp->next=NULL;
 if(start==NULL)
  start=temp;
 else
 {
  p=start;
  while(p->next!=NULL)
  {
   //p->next=temp;
   p=p->next;
  }
  if(p->next==NULL)
   p->next=temp;
 }
}
void list::InsertAfter(int sele,int ele)
{
  if(start!=NULL)
  {
   struct node *p;
   p=start;
   while(p!=NULL && p->data!=sele)
    p=p->next;
   if(p!=NULL)
   {
    struct node *temp;
    temp=new node;
    temp->data=ele;
    temp->next=p->next;
    p->next=temp;
   }
   else
    cout<<"ele not found";
 }
 else
 cout<<"list is empty";
}
void list::InsertBefore(int ele,int sele)
{
 if(start!=NULL)
 {
  if(start->data==sele)
  {
   struct node *temp;
   temp=new node;
   temp->data=ele;
   temp->next=start;
   start=temp;
  }
 else
 {
  struct node *p;
  p=start;
  while(p->next!=NULL && p->next->data!=sele)
    p=p->next;
  if(p!=NULL)
  {
   struct node *temp;
   temp=new node;
   temp->data=ele;
   temp->next=p->next;
   p->next=temp;
  }
  else
   cout<<"element not found";
 }
 }
 else
   cout<<"list is empty";
}
void list::Display()
{
 struct node *p;
 p=start;
 while(p!=NULL)
  {
  cout<<p->data;
  p=p->next;
 }
}
int list::DeleteFirst()
{
 int x=-999;
 if(start!=NULL)
 {
  struct node *temp;
  temp=start;
  start=start->next;
  x=temp->data;
  delete temp;
 }
 else
  cout<<"list is empty";
 return x;
}
int list::DeleteLast()
{
 int x=-999;
 if(start!=NULL)
 {
  if(start->next==NULL)
  {
   x=start->data;
   delete start;
   start=NULL;
  }
  else
  {
   struct node *p;
   p=start;
   while(p->next->next!=NULL)
    p=p->next;
   x=p->next->data;
   delete p->next;
    p->next=NULL;
   }
  }
  else
   cout<<"list is empty";
   return x;
}
void list::DeleteSpec(int ele)
{
 struct node *temp,*curr;
 if(start!=NULL)
 {
  if(start->data==ele)
  {
   temp=start;
   start=temp->next;
   delete temp;
  }
  else
  {
   curr=start;
   while(curr->next!=NULL && curr->next->data != ele)
    curr=curr->next;
   if(curr->next!=NULL)
  {
   temp=curr->next;
   curr->next=temp->next;
   delete temp;
  }
  else
   cout<<"ele not found";
 }
 }
 else
  cout<<"list empty";
}
void list::Reverse()
{
 struct node *rev;
 struct node *temp;
 rev=NULL;
// if(start!=NULL)
// {
//  start->next=NULL;
  while(start!=NULL)
  {
   temp=start;
   start=temp->next;
   temp->next=rev;
   rev=temp;
  }
  start=rev;
// }
}
int main()
{
 list l;
 l.InsertFirst(2);
 l.InsertLast(4);
 l.InsertBefore(3,4);
 l.InsertAfter(4,5);
 l.Reverse();
 l.DeleteFirst();
 l.DeleteLast();
 l.DeleteSpec(3);
 l.Display();
 return 0;
}
